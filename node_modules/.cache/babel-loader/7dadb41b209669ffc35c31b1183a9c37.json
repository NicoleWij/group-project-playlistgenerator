{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nicole\\\\Desktop\\\\Projekt grupp 28\\\\playlistgenerator\\\\src\\\\js\\\\presenters\\\\playlistInfoPresenter.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport SongSource from '../songSource';\nimport { PlaylistInfoView, SeePlaylist } from '../views/playlistInfoView';\nimport { PlaylistDone } from '../promiseNoData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlaylistInfoPresenter(props) {\n  _s();\n\n  const [promise, setPromise] = React.useState(null);\n  const [data, setData] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [promiseArtist, setPromiseArtist] = React.useState(null);\n  const [dataArtist, setDataArtist] = React.useState(null);\n  const [errorArtist, setErrorArtist] = React.useState(null);\n  const [genres, setGenres] = React.useState(props.pmodel.genres);\n  const [artist, setArtist] = React.useState(props.pmodel.artist);\n  const [amount, setAmount] = React.useState(props.pmodel.chosenNumberOfSongs);\n  const [explicit, setExplicit] = React.useState(props.pmodel.explicit);\n  const [amountOfSongs, setAmountOfSongs] = React.useState(props.pmodel.songs.length);\n  const [generated, setGenerated] = React.useState(props.pmodel.playlistDone);\n  let copy = [];\n\n  for (let i = 0; i < props.pmodel.chosenNumberOfSongs; i++) {\n    copy.splice(0, 0, undefined);\n  }\n\n  React.useEffect(() => {\n    const obs = () => {\n      setGenres(props.pmodel.genres);\n      setArtist(props.pmodel.artist);\n      setAmount(props.pmodel.chosenNumberOfSongs);\n      setExplicit(props.pmodel.explicit);\n      setAmountOfSongs(props.pmodel.songs.length);\n      setGenerated(props.pmodel.playlistDone);\n    };\n\n    props.pmodel.addObserver(obs);\n    return () => props.pmodel.removeObserver(obs);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PlaylistInfoView, {\n      genres: genres,\n      artist: artist,\n      amount: amount,\n      explicit: explicit,\n      amountOfSongs: amountOfSongs,\n      generated: generated,\n      generateFromRadio: () => {\n        props.pmodel.genres.map(genre => {\n          let array = [];\n          setPromise(SongSource.getTracklistFromRadio(genre.id).then(data => {\n            setData(data);\n            console.log(data);\n\n            if (data.error === undefined) {\n              array = pickSongs(data.data, genre.value, props.pmodel.chosenNumberOfSongs, props.pmodel.explicit);\n\n              for (let i = 0; i < array.length; i++) {\n                copy.splice(0, 0, array[i]);\n              }\n\n              if (copy[props.pmodel.chosenNumberOfSongs / 2] !== undefined) {\n                props.pmodel.addSongsToPlaylist(copy.filter(x => x !== undefined));\n              }\n            }\n          }).catch(error => setError(error)));\n        });\n      },\n      generateFromArtist: () => {\n        let array = [];\n        setPromiseArtist(SongSource.getTracklistFromArtist(props.pmodel.artist.id).then(data => {\n          setDataArtist(data);\n          console.log(data);\n\n          if (data.error === undefined) {\n            array = pickSongs(data.data, 1, props.pmodel.chosenNumberOfSongs, props.pmodel.explicit);\n\n            for (let i = 0; i < array.length; i++) {\n              copy.splice(props.pmodel.chosenNumberOfSongs / 2, 0, array[i]);\n            }\n\n            if (copy[props.pmodel.chosenNumberOfSongs / 2] !== undefined) {\n              props.pmodel.addSongsToPlaylist(copy.filter(x => x !== undefined));\n            }\n          }\n\n          ;\n        }).catch(error => setErrorArtist(error)));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 14\n    }, this), PlaylistDone(promise, data, error) || PlaylistDone(promiseArtist, dataArtist, errorArtist) || /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(SeePlaylist, {\n        chosenAmount: amount,\n        actualAmount: amountOfSongs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlaylistInfoPresenter, \"w5WziX74kg+qVH3u0m3z2mB1n1U=\");\n\n_c = PlaylistInfoPresenter;\n\nfunction pickSongs(arrayWithSongs, percentage, numberOfSongs, explicit) {\n  let songs = [];\n  let amount = percentage * (numberOfSongs / 2);\n  let i = 0;\n\n  if (!explicit) {\n    let copy = arrayWithSongs.filter(s => !s.explicit_lyrics);\n    if (copy.length < amount) amount = copy.length;\n\n    for (let i = 0; copy[i] !== undefined && i < amount; i++) {\n      songs[i] = copy[i];\n    }\n  } else {\n    while (i < amount) {\n      songs[i] = arrayWithSongs[i];\n      i++;\n    }\n  }\n\n  console.log(songs);\n  return songs;\n}\n\nexport default PlaylistInfoPresenter;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistInfoPresenter\");","map":{"version":3,"sources":["C:/Users/Nicole/Desktop/Projekt grupp 28/playlistgenerator/src/js/presenters/playlistInfoPresenter.js"],"names":["React","SongSource","PlaylistInfoView","SeePlaylist","PlaylistDone","PlaylistInfoPresenter","props","promise","setPromise","useState","data","setData","error","setError","promiseArtist","setPromiseArtist","dataArtist","setDataArtist","errorArtist","setErrorArtist","genres","setGenres","pmodel","artist","setArtist","amount","setAmount","chosenNumberOfSongs","explicit","setExplicit","amountOfSongs","setAmountOfSongs","songs","length","generated","setGenerated","playlistDone","copy","i","splice","undefined","useEffect","obs","addObserver","removeObserver","map","genre","array","getTracklistFromRadio","id","then","console","log","pickSongs","value","addSongsToPlaylist","filter","x","catch","getTracklistFromArtist","arrayWithSongs","percentage","numberOfSongs","s","explicit_lyrics"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport SongSource from '../songSource';\r\nimport { PlaylistInfoView, SeePlaylist } from '../views/playlistInfoView';\r\nimport { PlaylistDone } from '../promiseNoData';\r\n\r\nfunction PlaylistInfoPresenter(props) {\r\n    const [promise, setPromise] = React.useState(null);\r\n    const [data, setData] = React.useState(null);\r\n    const [error, setError] = React.useState(null);\r\n\r\n    const [promiseArtist, setPromiseArtist] = React.useState(null);\r\n    const [dataArtist, setDataArtist] = React.useState(null);\r\n    const [errorArtist, setErrorArtist] = React.useState(null);\r\n\r\n    const [genres, setGenres] = React.useState(props.pmodel.genres);\r\n    const [artist, setArtist] = React.useState(props.pmodel.artist);\r\n    const [amount, setAmount] = React.useState(props.pmodel.chosenNumberOfSongs);\r\n    const [explicit, setExplicit] = React.useState(props.pmodel.explicit);\r\n    const [amountOfSongs, setAmountOfSongs] = React.useState(props.pmodel.songs.length);\r\n\r\n    const [generated, setGenerated] = React.useState(props.pmodel.playlistDone);\r\n\r\n    let copy = [];\r\n    for (let i = 0; i < props.pmodel.chosenNumberOfSongs; i++) {\r\n        copy.splice(0,0,undefined)\r\n        \r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const obs = () => {\r\n            setGenres(props.pmodel.genres)\r\n            setArtist(props.pmodel.artist)\r\n            setAmount(props.pmodel.chosenNumberOfSongs)\r\n            setExplicit(props.pmodel.explicit)\r\n            setAmountOfSongs(props.pmodel.songs.length)\r\n            setGenerated(props.pmodel.playlistDone)\r\n        };\r\n        props.pmodel.addObserver(obs);\r\n        return () => props.pmodel.removeObserver(obs);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {<PlaylistInfoView genres={genres}\r\n                artist={artist}\r\n                amount={amount}\r\n                explicit={explicit}\r\n                amountOfSongs={amountOfSongs}\r\n                generated={generated}\r\n                generateFromRadio={() => {\r\n                    props.pmodel.genres.map(genre => {\r\n                        let array = []\r\n                        setPromise(\r\n                            SongSource.getTracklistFromRadio(genre.id)\r\n                                .then((data) => {\r\n                                    setData(data);\r\n                                    console.log(data)\r\n                                    if (data.error === undefined) {\r\n                                        array = pickSongs(data.data, genre.value, props.pmodel.chosenNumberOfSongs, props.pmodel.explicit);\r\n                                        for (let i = 0; i < array.length; i++) {\r\n                                            copy.splice(0,0,array[i]);\r\n                                        }\r\n                                        if (copy[props.pmodel.chosenNumberOfSongs/2] !== undefined) {\r\n                                            props.pmodel.addSongsToPlaylist(copy.filter(x => x !== undefined))\r\n                                        }\r\n                                    }\r\n                                })\r\n                                .catch((error) => setError(error)),\r\n                        )\r\n                    })\r\n                }}\r\n                generateFromArtist={() => {\r\n                    let array = []\r\n                    setPromiseArtist(\r\n                        SongSource.getTracklistFromArtist(props.pmodel.artist.id)\r\n                            .then((data) => {\r\n                                setDataArtist(data);\r\n                                console.log(data)\r\n                                if (data.error === undefined) {\r\n                                    array = pickSongs(data.data, 1, props.pmodel.chosenNumberOfSongs, props.pmodel.explicit);\r\n                                    for (let i = 0; i < array.length; i++) {\r\n                                        copy.splice(props.pmodel.chosenNumberOfSongs/2,0,array[i]);\r\n                                    }\r\n                                    if (copy[props.pmodel.chosenNumberOfSongs/2] !== undefined) {\r\n                                        props.pmodel.addSongsToPlaylist(copy.filter(x => x !== undefined))\r\n                                    }\r\n                                };\r\n                            })\r\n                            .catch((error) => setErrorArtist(error))\r\n                    )\r\n                }}\r\n            />}\r\n            {\r\n                PlaylistDone(promise, data, error) ||\r\n                PlaylistDone(promiseArtist, dataArtist, errorArtist) ||\r\n                <div><SeePlaylist chosenAmount={amount}\r\n                    actualAmount={amountOfSongs} /></div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction pickSongs(arrayWithSongs, percentage, numberOfSongs, explicit) {\r\n    let songs = [];\r\n    let amount = (percentage * (numberOfSongs / 2));\r\n    let i = 0;\r\n\r\n    if (!explicit) {\r\n        let copy = arrayWithSongs.filter(s => !s.explicit_lyrics);\r\n        if(copy.length < amount)\r\n            amount = copy.length\r\n\r\n        for (let i = 0; copy[i] !== undefined && i < amount ; i++) {\r\n            songs[i] = copy[i];   \r\n        }\r\n    } else {\r\n        while (i < amount) {\r\n            songs[i] = arrayWithSongs[i];\r\n            i++;\r\n        }\r\n    }\r\n    console.log(songs)\r\n    return songs;\r\n}\r\n\r\n\r\nexport default PlaylistInfoPresenter;"]},"metadata":{},"sourceType":"module"}