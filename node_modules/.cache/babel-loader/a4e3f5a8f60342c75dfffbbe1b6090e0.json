{"ast":null,"code":"// import { connectFirestoreEmulator } from \"firebase/firestore\";\nclass PlaylistModel {\n  constructor() {\n    this.playlistName = null;\n    this.chosenNumberOfSongs = 0;\n    this.actualNumberOfSongs = 0;\n    this.explicit = false;\n    this.genres = [];\n    this.currentSong = null;\n    this.songs = [];\n    this.observers = [];\n    this.artist = null;\n    this.total = 0;\n    this.currentSong = null;\n    this.currentAudio = null;\n    this.playlistDone = false;\n  }\n\n  resetPlaylist() {\n    this.playlistName = null;\n    this.chosenNumberOfSongs = 0;\n    this.actualNumberOfSongs = 0;\n    this.explicit = false;\n    this.genres = [];\n    this.currentSong = null;\n    this.songs = [];\n    this.artist = null;\n    this.total = 0;\n    this.currentSong = null;\n    this.currentAudio = null;\n    this.playlistDone = false;\n    this.notifyObservers();\n  }\n\n  addGenre(radioID, value, name) {\n    if (value === 0) {\n      console.log(\"remove\");\n      this.removeGenre(radioID);\n      this.setTotalPercent();\n      return;\n    }\n\n    if (this.genres.some(g => g.id === radioID)) {\n      this.genres.find(g => g.id === radioID).value = value / 100;\n      this.setTotalPercent();\n      return;\n    }\n\n    this.genres = [...this.genres, {\n      id: radioID\n    }];\n    this.genres.find(x => x.id === radioID).value = value / 100;\n    this.genres.find(x => x.id === radioID).name = name;\n    console.log(this.genres);\n    this.setTotalPercent();\n    console.log(this.total);\n    this.notifyObservers();\n  }\n\n  removeGenre(radioID) {\n    this.genres = this.genres.filter(genre => genre.id !== radioID);\n    this.notifyObservers();\n  }\n\n  setTotalPercent() {\n    let total = 0;\n    this.genres.forEach(genre => {\n      total += genre.value;\n    });\n    this.total = total;\n    this.notifyObservers();\n  }\n\n  setNumberOfSongs(length) {\n    this.chosenNumberOfSongs = length;\n    this.notifyObservers();\n  }\n\n  setActualNumberOfSongs(length) {\n    this.actualNumberOfSongs += length;\n\n    if (this.actualNumberOfSongs >= this.chosenNumberOfSongs) {\n      return;\n    }\n\n    console.log(this.actualNumberOfSongs);\n    this.notifyObservers();\n  }\n\n  setExplicit(choice) {\n    console.log(choice);\n    this.explicit = choice;\n    console.log(this.explicit);\n    this.notifyObservers();\n  }\n\n  setPlaylistName(name) {\n    this.playlistName = name;\n    this.notifyObservers();\n  }\n\n  setCurrentSong(song) {\n    if (this.currentSong === song) {\n      this.removeCurrentAudio();\n      return;\n    }\n\n    if (this.currentAudio !== null) {\n      this.removeCurrentAudio();\n    }\n\n    this.currentSong = song;\n    console.log(this);\n    this.setCurrentAudio(song);\n    this.notifyObservers();\n  }\n\n  setCurrentAudio(song) {\n    this.currentAudio = new Audio();\n    this.currentAudio.src = song.preview;\n    this.currentAudio.play();\n    this.notifyObservers();\n  }\n\n  removeCurrentAudio() {\n    this.currentAudio.pause();\n    this.currentSong = null;\n    this.notifyObservers();\n  }\n\n  addSongsToPlaylist(arrayWithSongs) {\n    console.log(this.chosenNumberOfSongs);\n\n    if (this.songs.length >= this.chosenNumberOfSongs) {\n      return;\n    }\n\n    this.songs = this.songs.concat(arrayWithSongs);\n    console.log(this.actualNumberOfSongs);\n    this.playlistDone = true;\n    this.notifyObservers();\n  }\n\n  addArtist(artist) {\n    this.artist = artist;\n    this.notifyObservers();\n  }\n\n  removeArtist() {\n    this.artist = null;\n    this.notifyObservers();\n  }\n\n  addObserver(callback) {\n    this.observers = [...this.observers, callback];\n  }\n\n  removeObserver(callback) {\n    this.observers = this.observers.filter(obs => obs !== callback);\n  }\n\n  notifyObservers() {\n    this.observers.forEach(cb => {\n      try {\n        cb();\n      } catch (e) {\n        console.log(e);\n      }\n    });\n  }\n\n  setcurrentSong(id) {\n    if (this.currentSong === id) {\n      return;\n    }\n\n    this.currentSong = id;\n    this.notifyObservers();\n  }\n\n}\n\nexport default PlaylistModel;","map":{"version":3,"sources":["C:/Users/Karolina/Documents/GitHub/group-project-playlistgenerator/src/js/playlistModel.js"],"names":["PlaylistModel","constructor","playlistName","chosenNumberOfSongs","actualNumberOfSongs","explicit","genres","currentSong","songs","observers","artist","total","currentAudio","playlistDone","resetPlaylist","notifyObservers","addGenre","radioID","value","name","console","log","removeGenre","setTotalPercent","some","g","id","find","x","filter","genre","forEach","setNumberOfSongs","length","setActualNumberOfSongs","setExplicit","choice","setPlaylistName","setCurrentSong","song","removeCurrentAudio","setCurrentAudio","Audio","src","preview","play","pause","addSongsToPlaylist","arrayWithSongs","concat","addArtist","removeArtist","addObserver","callback","removeObserver","obs","cb","e","setcurrentSong"],"mappings":"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","sourcesContent":["// import { connectFirestoreEmulator } from \"firebase/firestore\";\r\n\r\nclass PlaylistModel {\r\n    constructor() {\r\n        this.playlistName = null;\r\n        this.chosenNumberOfSongs = 0;\r\n        this.actualNumberOfSongs = 0;\r\n        this.explicit = false;\r\n        this.genres = [];\r\n        this.currentSong = null;\r\n        this.songs = [];\r\n        this.observers = [];\r\n        this.artist = null;\r\n        this.total = 0;\r\n        this.currentSong = null;\r\n        this.currentAudio = null;\r\n        this.playlistDone = false;\r\n    }\r\n\r\n    resetPlaylist() {\r\n        this.playlistName = null;\r\n        this.chosenNumberOfSongs = 0;\r\n        this.actualNumberOfSongs = 0;\r\n        this.explicit = false;\r\n        this.genres = [];\r\n        this.currentSong = null;\r\n        this.songs = [];\r\n        this.artist = null;\r\n        this.total = 0;\r\n        this.currentSong = null;\r\n        this.currentAudio = null;\r\n        this.playlistDone = false;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    addGenre(radioID, value, name) {\r\n\r\n        if (value === 0) {\r\n            console.log(\"remove\")\r\n            this.removeGenre(radioID);\r\n            this.setTotalPercent();\r\n            return;\r\n        }\r\n        if (this.genres.some(g => g.id === radioID)) {\r\n            this.genres.find(g => g.id === radioID).value = (value / 100);\r\n            this.setTotalPercent();\r\n            return;\r\n        }\r\n\r\n        this.genres = [...this.genres, { id: radioID }];\r\n        this.genres.find(x => x.id === radioID).value = (value / 100);\r\n        this.genres.find(x => x.id === radioID).name = name;\r\n        console.log(this.genres);\r\n        this.setTotalPercent();\r\n        console.log(this.total)\r\n\r\n\r\n        this.notifyObservers();\r\n    }\r\n\r\n    removeGenre(radioID) {\r\n        this.genres = this.genres.filter((genre) => genre.id !== radioID);\r\n        this.notifyObservers();\r\n    }\r\n\r\n    setTotalPercent() {\r\n        let total = 0;\r\n        this.genres.forEach(genre => {\r\n            total += genre.value;\r\n        });\r\n        this.total = total;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    setNumberOfSongs(length) {\r\n        this.chosenNumberOfSongs = length;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    setActualNumberOfSongs(length) {\r\n        this.actualNumberOfSongs += length;\r\n        if (this.actualNumberOfSongs >= this.chosenNumberOfSongs) {\r\n            return;\r\n        }\r\n        console.log(this.actualNumberOfSongs)\r\n        this.notifyObservers();\r\n    }\r\n\r\n    setExplicit(choice) {\r\n        console.log(choice)\r\n        this.explicit = choice;\r\n        console.log(this.explicit);\r\n        this.notifyObservers();\r\n    }\r\n\r\n    setPlaylistName(name) {\r\n        this.playlistName = name;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    setCurrentSong(song) {\r\n        if (this.currentSong === song) {\r\n            this.removeCurrentAudio();\r\n            return;\r\n        }\r\n        if (this.currentAudio !== null) {\r\n            this.removeCurrentAudio();\r\n        }\r\n        this.currentSong = song;\r\n        console.log(this)\r\n        this.setCurrentAudio(song);\r\n        this.notifyObservers();\r\n    }\r\n\r\n    setCurrentAudio(song) {\r\n        this.currentAudio = new Audio();\r\n        this.currentAudio.src = song.preview;\r\n        this.currentAudio.play();\r\n        this.notifyObservers();\r\n    }\r\n\r\n    removeCurrentAudio() {\r\n        this.currentAudio.pause();\r\n        this.currentSong = null;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    addSongsToPlaylist(arrayWithSongs) {\r\n        console.log(this.chosenNumberOfSongs)\r\n        if (this.songs.length >= this.chosenNumberOfSongs) {\r\n            return;\r\n        }\r\n        this.songs = this.songs.concat(arrayWithSongs);\r\n        console.log(this.actualNumberOfSongs)\r\n        this.playlistDone = true;\r\n\r\n        this.notifyObservers();\r\n    }\r\n\r\n    addArtist(artist) {\r\n        this.artist = artist;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    removeArtist() {\r\n        this.artist = null;\r\n        this.notifyObservers();\r\n    }\r\n\r\n    addObserver(callback) {\r\n        this.observers = [...this.observers, callback];\r\n    }\r\n    removeObserver(callback) {\r\n        this.observers = this.observers.filter(obs => obs !== callback);\r\n    }\r\n    notifyObservers() {\r\n        this.observers.forEach(cb => {\r\n            try { cb() } catch (e) { console.log(e) }\r\n        });\r\n    }\r\n    setcurrentSong(id) {\r\n        if (this.currentSong === id) {\r\n            return;\r\n        }\r\n        this.currentSong = id;\r\n        this.notifyObservers();\r\n    }\r\n}\r\n\r\nexport default PlaylistModel;"]},"metadata":{},"sourceType":"module"}