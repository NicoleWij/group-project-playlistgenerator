{"ast":null,"code":"import { BASE_URL, API_KEY } from './apiConfig';\nexport const SongSource = {\n  // JS object creation literal\n  apiCall(params) {\n    return fetch(BASE_URL + params, {\n      \"method\": \"GET\",\n      // HTTP method\n      \"headers\": {\n        // HTTP headers\n        'x-rapidapi-host': 'deezerdevs-deezer.p.rapidapi.com',\n        'x-rapidapi-key': API_KEY\n      }\n    }).then(response => {\n      if (response.status != 200) throw \"error \" + response.status;\n      return response;\n    }) // from HTTP response headers to HTTP response data\n    .then(response => response.json());\n  },\n\n  // comma between object entries\n  getSongDetails(id) {\n    return SongSource.apiCall('/track/' + id);\n  },\n\n  getArtistsFromGenre(id) {\n    return SongSource.apiCall(\"/genre/\" + id + \"/artists\");\n  },\n\n  getSongsFromArtist(id) {\n    return SongSource.apiCall(\"/artist/\" + id + \"/top\");\n  },\n\n  searchSongs(params) {\n    return SongSource.apiCall('/search/artist?q=' + new URLSearchParams(params));\n  },\n\n  getRadiosFromGenre(id) {\n    return SongSource.apiCall(\"/genre/\" + id + \"/radios\");\n  },\n\n  getTracklistFromRadio(id) {\n    return SongSource.apiCall(\"/radio/\" + id + \"/tracks\");\n  },\n\n  getTracklistFromArtist(id) {\n    return SongSource.apiCall(\"/artist/\" + id + \"/radio\");\n  },\n\n  getAlbumFromTrack(id) {\n    return SongSource.apiCall(\"/artist/\" + id + \"/radio\");\n  }\n\n};","map":{"version":3,"sources":["C:/Users/Nicole/Desktop/Projekt grupp 28/playlistgenerator/src/js/songSource.js"],"names":["BASE_URL","API_KEY","SongSource","apiCall","params","fetch","then","response","status","json","getSongDetails","id","getArtistsFromGenre","getSongsFromArtist","searchSongs","URLSearchParams","getRadiosFromGenre","getTracklistFromRadio","getTracklistFromArtist","getAlbumFromTrack"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,aAAlC;AAEA,OAAO,MAAMC,UAAU,GAAG;AAAI;AAC1BC,EAAAA,OAAO,CAACC,MAAD,EAAS;AACZ,WAAOC,KAAK,CAACL,QAAQ,GAAGI,MAAZ,EAAoB;AACxB,gBAAU,KADc;AACM;AAC9B,iBAAW;AAAmB;AAC1B,2BAAmB,kCADZ;AAEP,0BAAkBH;AAFX;AAFa,KAApB,CAAL,CAMAK,IANA,CAMKC,QAAQ,IAAI;AAAE,UAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B,MAAM,WAAWD,QAAQ,CAACC,MAA1B;AAAkC,aAAOD,QAAP;AAAiB,KANlG,EAQC;AARD,KASED,IATF,CASOC,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EATnB,CAAP;AAWH,GAbqB;;AAajB;AAELC,EAAAA,cAAc,CAACC,EAAD,EAAK;AACf,WAAOT,UAAU,CAACC,OAAX,CAAmB,YAAYQ,EAA/B,CAAP;AACH,GAjBqB;;AAmBtBC,EAAAA,mBAAmB,CAACD,EAAD,EAAI;AACnB,WAAOT,UAAU,CAACC,OAAX,CAAmB,YAAYQ,EAAZ,GAAiB,UAApC,CAAP;AACH,GArBqB;;AAuBtBE,EAAAA,kBAAkB,CAACF,EAAD,EAAI;AAClB,WAAOT,UAAU,CAACC,OAAX,CAAmB,aAAYQ,EAAZ,GAAiB,MAApC,CAAP;AACH,GAzBqB;;AA2BtBG,EAAAA,WAAW,CAACV,MAAD,EAAS;AAChB,WAAOF,UAAU,CAACC,OAAX,CAAmB,sBACpB,IAAIY,eAAJ,CAAoBX,MAApB,CADC,CAAP;AAEH,GA9BqB;;AAgCtBY,EAAAA,kBAAkB,CAACL,EAAD,EAAI;AAClB,WAAOT,UAAU,CAACC,OAAX,CAAmB,YAAWQ,EAAX,GAAe,SAAlC,CAAP;AACH,GAlCqB;;AAoCtBM,EAAAA,qBAAqB,CAACN,EAAD,EAAI;AACrB,WAAOT,UAAU,CAACC,OAAX,CAAmB,YAAYQ,EAAZ,GAAiB,SAApC,CAAP;AACH,GAtCqB;;AAwCtBO,EAAAA,sBAAsB,CAACP,EAAD,EAAI;AACtB,WAAOT,UAAU,CAACC,OAAX,CAAmB,aAAYQ,EAAZ,GAAgB,QAAnC,CAAP;AACH,GA1CqB;;AA4CtBQ,EAAAA,iBAAiB,CAACR,EAAD,EAAI;AACjB,WAAOT,UAAU,CAACC,OAAX,CAAmB,aAAYQ,EAAZ,GAAgB,QAAnC,CAAP;AACH;;AA9CqB,CAAnB","sourcesContent":["import { BASE_URL, API_KEY } from './apiConfig';\r\n\r\nexport const SongSource = {   // JS object creation literal\r\n    apiCall(params) {\r\n        return fetch(BASE_URL + params, {\r\n                \"method\": \"GET\",              // HTTP method\r\n                \"headers\": {                  // HTTP headers\r\n                    'x-rapidapi-host': 'deezerdevs-deezer.p.rapidapi.com',\r\n                    'x-rapidapi-key': API_KEY\r\n                }\r\n            }).then(response => { if (response.status != 200) throw \"error \" + response.status; return response })\r\n\r\n                // from HTTP response headers to HTTP response data\r\n                .then(response => response.json());\r\n\r\n    },   // comma between object entries\r\n\r\n    getSongDetails(id) {\r\n        return SongSource.apiCall('/track/' + id);\r\n    },\r\n\r\n    getArtistsFromGenre(id){\r\n        return SongSource.apiCall(\"/genre/\" + id + \"/artists\");\r\n    },\r\n\r\n    getSongsFromArtist(id){\r\n        return SongSource.apiCall(\"/artist/\"+ id + \"/top\");\r\n    },\r\n\r\n    searchSongs(params) {\r\n        return SongSource.apiCall('/search/artist?q='\r\n            + new URLSearchParams(params));\r\n    },\r\n\r\n    getRadiosFromGenre(id){\r\n        return SongSource.apiCall(\"/genre/\"+ id +\"/radios\");\r\n    },\r\n\r\n    getTracklistFromRadio(id){\r\n        return SongSource.apiCall(\"/radio/\" + id + \"/tracks\");\r\n    },\r\n\r\n    getTracklistFromArtist(id){\r\n        return SongSource.apiCall(\"/artist/\"+ id +\"/radio\");\r\n    },\r\n\r\n    getAlbumFromTrack(id){\r\n        return SongSource.apiCall(\"/artist/\"+ id +\"/radio\");\r\n    }\r\n\r\n};"]},"metadata":{},"sourceType":"module"}